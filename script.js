// Function to add a new rule input
function addRule(value = "", isFirst = false) {
  const rulesList = document.getElementById("rules-list");
  const newRuleItem = document.createElement("div");
  newRuleItem.className = "rule-item flex items-center gap-1.5";

  const newInput = document.createElement("input");
  newInput.type = "text";
  newInput.placeholder = "enter rule";

  // Set the input value (empty by default if no value is provided)
  newInput.value = value; // Leave empty if no value is passed

  newInput.className =
    "outline-none mt-1 block border-2 py-2 px-4 border-gray-200 rounded-md";
  newInput.style.fontSize = "14px";
  newInput.style.flex = "1";

  newRuleItem.appendChild(newInput);

  // Only add the trash button if it's not the first input
  if (!isFirst) {
    const newButton = document.createElement("button");
    newButton.className =
      "flex items-center justify-center bg-white border-2 border-gray-200 rounded-md hover:bg-gray-100 mt-1";
    newButton.style.padding = "10.8px 0.75rem";

    const newIcon = document.createElement("i");
    newIcon.className = "fas fa-trash text-red-600";
    newButton.appendChild(newIcon);

    newRuleItem.appendChild(newButton);

    // Add event listener to remove the rule
    newButton.addEventListener("click", function () {
      newRuleItem.remove();
    });
  }

  rulesList.appendChild(newRuleItem);
}

// Function to load the saved rules from localStorage
function loadSavedRules() {
  const savedRules = JSON.parse(localStorage.getItem("rules")) || [];

  // If no saved rules, add an empty input as the default
  if (savedRules.length === 0) {
    addRule("", true);
  } else {
    addRule(savedRules[0], true);
    savedRules.slice(1).forEach((rule) => addRule(rule));
  }
}

// Function to save form data to localStorage
function saveFormData() {
  const title = document.getElementById("title").value;
  const rules = Array.from(
    document.querySelectorAll("#rules-list input[type='text']")
  ).map((input) => input.value);
  const chatgpt4Checked = document.getElementById("check").checked;
  const termsChecked = document.getElementById("terms").checked;

  localStorage.setItem("title", title);
  localStorage.setItem("rules", JSON.stringify(rules));
  localStorage.setItem("chatgpt4", chatgpt4Checked);
  localStorage.setItem("terms", termsChecked);
}

// Initialize the CodeMirror editor
function initializeCodeMirror(content) {
  const editor = CodeMirror(document.getElementById("code-mirror-editor"), {
    value: content,
    mode: "python",
    theme: "material",
    lineNumbers: false,
    readOnly: true,
    lineWrapping: true,
  });

  editor.setSize("100%", "450px");
  editor.focus();
}

document.addEventListener("DOMContentLoaded", function () {
  const codeEditorContent = `import pennylane as qml
from pennylane import numpy as np
from dynex import dynex_circuit

# Define a Pennylane Quantum Circuit for a simple 3x3 Sudoku model
n_qubits = 6

def PLCircuit(params):
    wires = range(n_qubits)

    # Apply Hadamard gates
    for w in wires:
        qml.Hadamard(wires=w)

    # Apply CNOT gates to enforce some constraints
    qml.CNOT(wires=[0, 1]);
    qml.CNOT(wires=[2, 3]);
    qml.CNOT(wires=[4, 5]);

    qml.CNOT(wires=[1, 2]);
    qml.CNOT(wires=[3, 4]);
    qml.CNOT(wires=[5, 0]);

    return qml.state()

params = []
wires = range(n_qubits)
measure = dynex_circuit.execute(PLCircuit, params, wires, debugging=False, mainnet=True, is_cluster=True, description="DynexGPT-BETA", method='measure', shots=1)

print(measure)
#[SamerRahmeh-LOG]:: This code has been generated by DynexGPT-BETA`;

  const urlParams = new URLSearchParams(window.location.search);

  // Check if we should display the CodeMirror editor on working-on-your-code.html
  if (urlParams.has("from") && urlParams.get("from") === "dynex-code-gen") {
    setTimeout(() => {
      document.getElementById("generated-content").classList.remove("hidden");
      initializeCodeMirror(codeEditorContent);
    }, 1000);
  }

  // Check if we should display the CodeMirror editor on dynex-llm.html
  if (
    urlParams.has("from") &&
    urlParams.get("from") === "working-on-your-code"
  ) {
    document.getElementById("generated-content").classList.remove("hidden");
    initializeCodeMirror(codeEditorContent);
  }

  // loading screen duration and logic
  function showGeneratedContent() {
    const loadingContainer = document.getElementById("loading");
    const generatedContent = document.getElementById("generated-content");

    setTimeout(() => {
      loadingContainer.classList.add("hidden");
      generatedContent.classList.remove("hidden");
    }, 1000);
  }

  window.onload = showGeneratedContent;

  // Load saved form data
  document.getElementById("title").value = localStorage.getItem("title") || "";
  loadSavedRules(); // Load rules using the function

  document.getElementById("check").checked =
    localStorage.getItem("chatgpt4") === "true";
  document.getElementById("terms").checked =
    localStorage.getItem("terms") === "true";
});

// Function to remove a rule
function removeRule(button) {
  const ruleItem = button.parentElement;
  ruleItem.parentElement.removeChild(ruleItem);
}
